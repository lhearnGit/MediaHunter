// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URI")
}

//ACCOUNTS

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //User Content 

  gameIDs String[]     @db.ObjectId
  games   Igdb_Games[] @relation(fields: [gameIDs], references: [pid]) //use pid, check comment @ Igdb_Games model for explaination

  tvShowIDs String[] @db.ObjectId
  tvShows   Shows[]  @relation(fields: [tvShowIDs], references: [pid]) //use pid, check comment @ TMDB_TV model for explaination

  movieIDs String[] @db.ObjectId
  movies   Movies[] @relation(fields: [movieIDs], references: [pid]) //use pid, check comment @ TMDB_Movies model for explaination

  //collection of recently viewed games
  recent_GameIDs Int[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

//DATA MODELS

//******************* IGDB Models ***********************

//------------------------------ NAMING CONVENTION -----------------------
//the IGDB API uses a id field for querying routes
// to avoid naming errors, "prisma id" aka pid is used
//pid is ONLY used for QUERYABLE fields that interact with a 3rd Party api that uses an id field for fetching data
//------------------------------------------------------------------------

//-----------------------Igdb_Games Model Description ------ 8 / 28 / 2024 ----------------------------
//Many To Many Games belong to Many Games_Library
//Many Games_Library  - > Many Games
//To keep size small, initially only the pid and name of a game will be stored in the DB
//When the Data is fetched, during User Authentication, the data required will be populated via a bulk GET Request to IGDB

//---------------------------------------------------------

model Igdb_Games {
  pid  String  @id @default(auto()) @map("_id") @db.ObjectId
  id   Int     @unique //any stored game is unique
  name String
  url  String? //urls can only reference one Object

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])
}

//******************* Shows Models ***********************
//
//
//
//
//
//
//
//*******************************************************

model Shows {
  pid      String  @id @default(auto()) @map("_id") @db.ObjectId //interalID
  id       Int     @unique //any stored TV Show is unique, references TMDB Id
  name     String
  imageUrl String?

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])
}

model Movies {
  pid  String @id @default(auto()) @map("_id") @db.ObjectId //interalID
  id   Int    @unique //any stored Movie is unique, references TMDB Id
  name String

  imageUrl String?
  userIds  String[] @db.ObjectId
  users    User[]   @relation(fields: [userIds], references: [id])
}
